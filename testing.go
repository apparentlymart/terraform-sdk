package tfsdk

import (
	"os"

	"github.com/apparentlymart/terraform-sdk/tftest"
)

// InitProviderTesting is the main entrypoint for testing provider plugins
// using this package. It is intended to be called during TestMain to prepare
// for provider testing.
//
// When testing a provider, the test executable (generated by "go test") serves
// double-duty both as the driver of the tests themselves and as the plugin
// executable, and InitProvider deals with that switching as follows:
//
// On the initial test run, InitProviderTesting will discover the location of a
// current Terraform CLI executable to test against, detect whether a prior
// version of the plugin is available for upgrade tests, and then will
// return an object containing the results of that initialization which can
// then be stored in a global variable for use in other tests.
//
// If the test program detects that it is being run as a Terraform plugin
// server then it will instead call into the SDK to serve the given provider
// and then exit. This sub-process does not run any tests itself, but merely
// waits for provider RPC calls like any other provider plugin process.
//
// If a suitable Terraform CLI executable cannot be found, or some other
// environmental problem is detected, this function will print an error message
// to stderr and exit the process immediately with status 1.
//
// The usual pattern for initialization in TestMain is:
//
//     var testHelper *tftest.Helper
//
//     func TestMain(m *testing.M) {
//         testHelper = tfsdk.InitProviderTesting("example", exampleProvider())
//         status := m.Run()
//         testHelper.Close()
//         os.Exit(status)
//     }
//
func InitProviderTesting(name string, provider *Provider) *tftest.Helper {
	if tftest.RunningAsPlugin() {
		// The test program is being re-launched as a provider plugin via our
		// stub program.
		ServeProviderPlugin(provider)
		os.Exit(0)
	}

	return tftest.AutoInitProviderHelper(name)
}
